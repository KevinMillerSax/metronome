{"version":3,"sources":["audio/click1.wav","audio/click2.wav","Metronome/BeatCount/BeatCount.js","Metronome/Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BeatCount","props","react_default","a","createElement","className","count","beatsPerMeasure","Metronome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBpmChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","startStop","_this$state","click2","play","click1","fourBeats","threeBeats","twoBeats","Audio","_this$state2","type","min","max","onChange","onClick","Metronome_BeatCount_BeatCount","id","disabled","style","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Metronome_Metronome","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49a71681.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React from 'react';\nimport './BeatCount.css'\n\nconst BeatCount = (props) => (\n  <div className=\"beat-count\">\n      \n      {props.count % props.beatsPerMeasure === 0 ? props.beatsPerMeasure : props.count}  \n       \n  </div>\n);\n\nexport default BeatCount;","import React, {Component} from 'react';\nimport './Metronome.css';\nimport click1 from '../audio/click1.wav';\nimport click2 from '../audio/click2.wav';\nimport BeatCount from './BeatCount/BeatCount';\n\n\nclass Metronome extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            playing: false,\n            count: 0,\n            bpm: 120,\n            beatsPerMeasure: 4\n        };\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n    }\n\n    handleBpmChange = (event) => {  //will handle tempo changes in real time\n        const bpm = event.target.value;\n        if(this.state.playing){ //reset if you slide the counter while it's ticking\n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick, (60/bpm) *1000);\n            this.setState({\n                count: 0,\n                bpm\n            })\n        } else { //if not ticking, just set the bpm\n            this.setState({bpm});\n        }\n\n    }\n\n    startStop = () => {\n        if (this.state.playing) {\n            clearInterval(this.timer);  //clearInterval stops the time\n            this.setState({playing: false});\n        } else { //start the timer\n            this.timer = setInterval(\n                this.playClick,\n                (60 / this.state.bpm) * 1000  \n            );\n            this.setState(\n                {\n                    count: 1,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    }\n\n    playClick = () => {\n        const {count, beatsPerMeasure} = this.state;\n        if(count % beatsPerMeasure === 0) { //remember, this is the modulo trick that moves our counter down to zero\n            this.click2.play();\n        } else {\n            this.click1.play();\n        }\n        this.setState(state => ({count: (state.count +1) % state.beatsPerMeasure}));  //keep tract of beat\n    }\n\n    fourBeats = () => {\n        this.setState({beatsPerMeasure: 4});\n    }\n\n    threeBeats = () => {\n        this.setState({beatsPerMeasure: 3});\n    }\n\n    twoBeats = () => {\n        this.setState({beatsPerMeasure: 2});\n    }\n\n\n    render(){\n       const{playing, bpm} = this.state;\n\n        return(\n            <div className=\"metronome\">\n                \n                <div className=\"bpm-slider\">\n                    <div>{bpm} BPM</div>\n                    <input \n                    type=\"range\" \n                    min=\"40\" \n                    max=\"280\" \n                    value={bpm} \n                    onChange={this.handleBpmChange}\n                    />\n                </div>\n                <div className=\"start-counter\">\n                    <button  \n                        className=\"metronome-button\"\n                        onClick={this.startStop}\n                        >\n                        {playing ? 'Stop' : 'Start'} \n                    </button>\n                    <BeatCount \n                    count={this.state.count}\n                    beatsPerMeasure={this.state.beatsPerMeasure}\n                    />\n                </div>\n                <div className=\"meters\">\n                    <button className=\"meter-btn\" onClick={this.fourBeats}>4/4</button>\n                    <button className=\"meter-btn\" onClick={this.threeBeats}>3/4</button>\n                    <button className=\"meter-btn\" onClick={this.twoBeats}>2/4</button>\n                </div>\n                <button id=\"light\" className=\"metronome-light\" disabled\n                style={{\n                    backgroundColor: this.state.count === 1 ? \"red\" : \"#1867DE\"\n                }}\n                >  \n                </button>\n                \n                \n            </div>\n        );\n    }\n}\n\nexport default Metronome;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome/Metronome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}